{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useState } from \"react\";\nexport function useCardState(initialState) {\n  _s();\n\n  const [cardState, setCardState] = useState(initialState);\n  const [removedCards, setRemovedCards] = useState([]);\n  const [removedColumns, setRemovedColumns] = useState([]);\n\n  const idCorrection = arr => {\n    for (let i = 0; i < arr.length; i++) {\n      if (arr[i].id !== i) {\n        arr[i].id = i;\n      }\n    }\n\n    return arr;\n  };\n\n  function insertNewColumn(column_title) {\n    let new_id = cardState.length;\n    setCardState([...cardState, {\n      id: new_id,\n      title: column_title,\n      cards: []\n    }]);\n  }\n\n  function insertNewCard(location, contents) {\n    const new_id = cardState[location].cards.length;\n    const update = cardState;\n    const today = new Date();\n    update[location].cards = [...update[location].cards, {\n      id: new_id,\n      title: contents.card_title,\n      date: `${today.getMonth() + 1}-${today.getDate()}-${today.getFullYear()}`,\n      description: contents.description\n    }];\n    setCardState(update);\n  }\n\n  function relocateCard(dragId, destination) {\n    const column_Id = dragId[0];\n    const card_Id = dragId[1];\n\n    if (destination !== column_Id) {\n      const card_store = cardState[column_Id].cards[card_Id];\n      const update = cardState;\n      card_store.id = update[destination].cards.length;\n      update[destination].cards = [...update[destination].cards, card_store];\n      update[column_Id].cards.splice(card_Id, 1);\n      const old_ids = update[column_Id].cards;\n      const idUpdate = idCorrection(old_ids);\n      update[column_Id].cards = idUpdate;\n      setCardState(update);\n    }\n  }\n\n  function relocateColumn(column_Id, destination) {\n    if (column_Id !== destination) {\n      const column_store = cardState[column_Id];\n      const update = cardState;\n      update.splice(column_Id, 1);\n      update.splice(destination, 0, column_store);\n      const idUpdate = idCorrection(update);\n      setCardState(idUpdate);\n    }\n  }\n\n  function binCard(column_Id, card_Id) {\n    const card_store = cardState[column_Id].cards[card_Id];\n    const update = cardState;\n    update[column_Id].cards.splice(card_Id, 1);\n    setRemovedCards([...removedCards, card_store]);\n    const old_ids = update[column_Id].cards;\n    const idUpdate = idCorrection(old_ids);\n    update[column_Id].cards = idUpdate;\n    setCardState(update);\n  }\n\n  function binColumn(column_Id) {\n    const update = cardState;\n    setRemovedColumns([...removedColumns, update[column_Id]]);\n    update.splice(column_Id, 1);\n    const idUpdate = idCorrection(update);\n    setCardState(idUpdate);\n  }\n\n  return [cardState, insertNewColumn, insertNewCard, relocateCard, relocateColumn, removedCards, removedColumns, binCard, binColumn];\n}\n\n_s(useCardState, \"LylQu0dUOFnTjhZUBq07XW/1UeY=\");","map":{"version":3,"sources":["/Users/aply/Documents/SelfStudy/FocusedKanban/src/customHooks/cardManage.js"],"names":["useState","useCardState","initialState","cardState","setCardState","removedCards","setRemovedCards","removedColumns","setRemovedColumns","idCorrection","arr","i","length","id","insertNewColumn","column_title","new_id","title","cards","insertNewCard","location","contents","update","today","Date","card_title","date","getMonth","getDate","getFullYear","description","relocateCard","dragId","destination","column_Id","card_Id","card_store","splice","old_ids","idUpdate","relocateColumn","column_store","binCard","binColumn"],"mappings":"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","sourcesContent":["import { useState } from \"react\";\n\nexport function useCardState(initialState) {\n  const [cardState, setCardState] = useState(initialState);\n  const [removedCards, setRemovedCards] = useState([]);\n  const [removedColumns, setRemovedColumns] = useState([]);\n\n  const idCorrection = (arr) => {\n    for (let i = 0; i < arr.length; i++) {\n      if (arr[i].id !== i) {\n        arr[i].id = i;\n      }\n    }\n    return arr;\n  };\n\n  function insertNewColumn(column_title) {\n    let new_id = cardState.length;\n    setCardState([\n      ...cardState,\n      {\n        id: new_id,\n        title: column_title,\n        cards: [],\n      },\n    ]);\n  }\n\n  function insertNewCard(location, contents) {\n    const new_id = cardState[location].cards.length;\n    const update = cardState;\n    const today = new Date();\n    update[location].cards = [\n      ...update[location].cards,\n      {\n        id: new_id,\n        title: contents.card_title,\n        date: `${\n          today.getMonth() + 1\n        }-${today.getDate()}-${today.getFullYear()}`,\n        description: contents.description,\n      },\n    ];\n    setCardState(update);\n  }\n\n  function relocateCard(dragId, destination) {\n    const column_Id = dragId[0];\n    const card_Id = dragId[1];\n    if (destination !== column_Id) {\n      const card_store = cardState[column_Id].cards[card_Id];\n      const update = cardState;\n      card_store.id = update[destination].cards.length;\n      update[destination].cards = [...update[destination].cards, card_store];\n      update[column_Id].cards.splice(card_Id, 1);\n      const old_ids = update[column_Id].cards;\n      const idUpdate = idCorrection(old_ids);\n      update[column_Id].cards = idUpdate;\n      setCardState(update);\n    }\n  }\n\n  function relocateColumn(column_Id, destination) {\n    if (column_Id !== destination) {\n      const column_store = cardState[column_Id];\n      const update = cardState;\n      update.splice(column_Id, 1);\n      update.splice(destination, 0, column_store);\n      const idUpdate = idCorrection(update);\n      setCardState(idUpdate);\n    }\n  }\n\n  function binCard(column_Id, card_Id) {\n    const card_store = cardState[column_Id].cards[card_Id];\n    const update = cardState;\n    update[column_Id].cards.splice(card_Id, 1);\n    setRemovedCards([...removedCards, card_store])\n    const old_ids = update[column_Id].cards\n    const idUpdate = idCorrection(old_ids)\n    update[column_Id].cards = idUpdate\n    setCardState(update)\n  }\n\n  function binColumn(column_Id) {\n    const update = cardState\n    setRemovedColumns([...removedColumns, update[column_Id]])\n    update.splice(column_Id, 1)\n    const idUpdate = idCorrection(update)\n    setCardState(idUpdate)\n    \n  }\n\n  return [\n    cardState,\n    insertNewColumn,\n    insertNewCard,\n    relocateCard,\n    relocateColumn,\n    removedCards,\n    removedColumns,\n    binCard,\n    binColumn\n  ];\n}\n"]},"metadata":{},"sourceType":"module"}