{"ast":null,"code":"var _jsxFileName = \"/Users/aply/Documents/SelfStudy/FocusedKanban/src/KanBan.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from \"react\";\nimport Board from \"./components/board\";\nimport Col from \"./components/col\";\nimport NavBar from \"./components/navBar\";\nimport { DndProvider } from \"react-dnd\";\nimport { HTML5Backend } from \"react-dnd-html5-backend\";\nimport { useCardState } from \"./customHooks/cardManage\";\nimport DeleteBin from \"./components/subComponents/deleteBin\";\nimport BinContents from \"./components/subComponents/binContents\";\nimport { connect } from \"react-redux\";\nimport { getCompleteBoard } from \"./redux/actions/boardAction\"; // const testdata = [\n//   {\n//     id: 0,\n//     title: \"Open Task\",\n//     cards: [\n//       {\n//         id: 0,\n//         title: \"Stylize\",\n//         date: \"1-20-2021\",\n//         description: \"Lets make the website pretty\",\n//       },\n//       {\n//         id: 1,\n//         title: \"Back-end\",\n//         date: \"1-20-2021\",\n//         description: \"We need data persistence, and availability.\",\n//       },\n//       {\n//         id: 2,\n//         title: \"Clean\",\n//         date: \"1-20-2021\",\n//         description: \"The Code, let's make sure its not spaghetti. \",\n//       },\n//     ],\n//   },\n//   {\n//     id: 1,\n//     title: \"In Progress\",\n//     cards: [\n//       {\n//         id: 0,\n//         title: \"Delete Functionality\",\n//         date: \"1-20-2021\",\n//         description: \"Users should be able to remove columns and cards.\",\n//       },\n//       {\n//         id: 1,\n//         title: \"Improve Sample Data\",\n//         date: \"1-20-2021\",\n//         description: \"Sample data needs to show how a trello board works. \",\n//       },\n//       {\n//         id: 2,\n//         title: \"Organize Stylings\",\n//         date: \"1-20-2021\",\n//         description: \"Remove none js dependent stylings from js styles. \",\n//       },\n//     ],\n//   },\n//   {\n//     id: 2,\n//     title: \"Completed\",\n//     cards: [\n//       {\n//         id: 0,\n//         title: \"Click and Drag Functionality\",\n//         date: \"1-20-2021\",\n//         description: \"Cards and columns can be moved and edited. \",\n//       },\n//       {\n//         id: 1,\n//         title: \"Fix Id Function\",\n//         date: \"1-20-2021\",\n//         description: \"Fix bug where Id are not updating appropriately.\",\n//       },\n//       {\n//         id: 2,\n//         title: \"Build State Splice Methods\",\n//         date: \"1-20-2021\",\n//         description: \"Make state data reflect what users want to happen.\",\n//       },\n//     ],\n//   },\n// ];\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nfunction KanBan({\n  getCompleteBoard,\n  boardId,\n  boardInit\n}) {\n  _s();\n\n  useEffect(() => {\n    getCompleteBoard(boardId);\n  }, []);\n  const [isLoaded, setIsLoaded] = useState(false);\n  const [cardState, insertNewColumn, insertNewCard, relocateCard, relocateColumn, removedCards, removedColumns, binCard, binColumn] = useCardState(boardInit);\n  const [dragId, setDragId] = useState();\n  const [bin, setBin] = useState(false);\n\n  const newCol = title => {\n    insertNewColumn(title);\n  };\n\n  const newCard = (location, data) => {\n    insertNewCard(location, data);\n  };\n\n  const moveCard = destination => {\n    relocateCard(dragId, destination);\n  };\n\n  const moveColumn = destination => {\n    relocateColumn(dragId[0], destination);\n  };\n\n  const handleRemove = id => {\n    if (id[2] === \"card\") {\n      binCard(id[0], id[1]);\n    }\n\n    if (id[2] === \"col\") {\n      binColumn(id[0]);\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: e => console.log(cardState, \"redux\", boardInit),\n      children: \"Test\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 144,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(NavBar, {\n      newCol: newCol\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 145,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(DndProvider, {\n      backend: HTML5Backend\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 146,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n}\n\n_s(KanBan, \"VZ0Z1VinMZD1BgolCB4od+BOkhI=\", false, function () {\n  return [useCardState];\n});\n\n_c = KanBan;\n\nconst mapStateToProps = state => {\n  return {\n    boardId: state.dash.selectedBoard,\n    boardInit: state.board.boardData\n  };\n};\n\nexport default connect(mapStateToProps, {\n  getCompleteBoard\n})(KanBan);\n\nvar _c;\n\n$RefreshReg$(_c, \"KanBan\");","map":{"version":3,"sources":["/Users/aply/Documents/SelfStudy/FocusedKanban/src/KanBan.js"],"names":["React","useEffect","useState","Board","Col","NavBar","DndProvider","HTML5Backend","useCardState","DeleteBin","BinContents","connect","getCompleteBoard","KanBan","boardId","boardInit","isLoaded","setIsLoaded","cardState","insertNewColumn","insertNewCard","relocateCard","relocateColumn","removedCards","removedColumns","binCard","binColumn","dragId","setDragId","bin","setBin","newCol","title","newCard","location","data","moveCard","destination","moveColumn","handleRemove","id","e","console","log","mapStateToProps","state","dash","selectedBoard","board","boardData"],"mappings":"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","sourcesContent":["import React,{ useEffect, useState } from \"react\";\nimport Board from \"./components/board\";\nimport Col from \"./components/col\";\nimport NavBar from \"./components/navBar\";\nimport { DndProvider } from \"react-dnd\";\nimport { HTML5Backend } from \"react-dnd-html5-backend\";\nimport { useCardState } from \"./customHooks/cardManage\";\nimport DeleteBin from \"./components/subComponents/deleteBin\";\nimport BinContents from \"./components/subComponents/binContents\";\nimport { connect } from \"react-redux\";\nimport { getCompleteBoard } from \"./redux/actions/boardAction\";\n\n\n\n// const testdata = [\n//   {\n//     id: 0,\n//     title: \"Open Task\",\n//     cards: [\n//       {\n//         id: 0,\n//         title: \"Stylize\",\n//         date: \"1-20-2021\",\n//         description: \"Lets make the website pretty\",\n//       },\n//       {\n//         id: 1,\n//         title: \"Back-end\",\n//         date: \"1-20-2021\",\n//         description: \"We need data persistence, and availability.\",\n//       },\n//       {\n//         id: 2,\n//         title: \"Clean\",\n//         date: \"1-20-2021\",\n//         description: \"The Code, let's make sure its not spaghetti. \",\n//       },\n//     ],\n//   },\n//   {\n//     id: 1,\n//     title: \"In Progress\",\n//     cards: [\n//       {\n//         id: 0,\n//         title: \"Delete Functionality\",\n//         date: \"1-20-2021\",\n//         description: \"Users should be able to remove columns and cards.\",\n//       },\n//       {\n//         id: 1,\n//         title: \"Improve Sample Data\",\n//         date: \"1-20-2021\",\n//         description: \"Sample data needs to show how a trello board works. \",\n//       },\n//       {\n//         id: 2,\n//         title: \"Organize Stylings\",\n//         date: \"1-20-2021\",\n//         description: \"Remove none js dependent stylings from js styles. \",\n//       },\n//     ],\n//   },\n//   {\n//     id: 2,\n//     title: \"Completed\",\n//     cards: [\n//       {\n//         id: 0,\n//         title: \"Click and Drag Functionality\",\n//         date: \"1-20-2021\",\n//         description: \"Cards and columns can be moved and edited. \",\n//       },\n//       {\n//         id: 1,\n//         title: \"Fix Id Function\",\n//         date: \"1-20-2021\",\n//         description: \"Fix bug where Id are not updating appropriately.\",\n//       },\n//       {\n//         id: 2,\n//         title: \"Build State Splice Methods\",\n//         date: \"1-20-2021\",\n//         description: \"Make state data reflect what users want to happen.\",\n//       },\n//     ],\n//   },\n// ];\n\nfunction KanBan({getCompleteBoard, boardId, boardInit}) {\n\n  useEffect(()=> {\n    getCompleteBoard(boardId)\n    \n  },[])\n\n  const [isLoaded, setIsLoaded] = useState(false)\n  \n\n  const [\n    cardState,\n    insertNewColumn,\n    insertNewCard,\n    relocateCard,\n    relocateColumn,\n    removedCards,\n    removedColumns,\n    binCard,\n    binColumn\n  ] = useCardState(boardInit);\n\n  const [dragId, setDragId] = useState();\n\n  const [bin, setBin] = useState(false)\n\n  const newCol = (title) => {\n    insertNewColumn(title);\n  };\n\n  const newCard = (location, data) => {\n    insertNewCard(location, data);\n  };\n\n  \n  const moveCard = (destination) => {\n    relocateCard( dragId, destination);\n  };\n\n  const moveColumn =(destination) =>{\n    relocateColumn(dragId[0], destination)\n  }\n\n  const handleRemove = (id) => {\n    if(id[2] === \"card\"){\n      binCard(id[0], id[1])\n    }\n    if(id[2]=== \"col\"){\n      binColumn(id[0])\n    }\n  }\n\n  return (\n    <>\n      <button onClick={e=> console.log(cardState, \"redux\", boardInit)}>Test</button>\n      <NavBar newCol={newCol} />\n      <DndProvider backend={HTML5Backend}>\n        {/* <Board>\n          {cardState.map((col) => (\n            <Col\n              data={col}\n              key={col.id}\n              columnId={col.id}\n              newCard={newCard}\n              moveCard={moveCard}\n              moveColumn={moveColumn}\n              setDragId={setDragId}\n            />\n          ))}\n          <DeleteBin\n            dragId={dragId}\n            handleRemove={handleRemove}\n            setBin={setBin}\n          />\n          {bin? <BinContents removedCards={removedCards} removedColumns={removedColumns} setBin={setBin}/> : null}\n        </Board> */}\n      </DndProvider>\n    </>\n  );\n}\n\nconst mapStateToProps = (state) => {\n  return{\n    boardId: state.dash.selectedBoard,\n    boardInit: state.board.boardData\n  }\n}\n\nexport default connect(mapStateToProps, {getCompleteBoard})(KanBan);\n"]},"metadata":{},"sourceType":"module"}