{"ast":null,"code":"var _jsxFileName = \"/Users/aply/Documents/SelfStudy/FocusedKanban/src/KanBan.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from \"react\";\nimport Board from \"./components/board\";\nimport Col from \"./components/col\";\nimport NavBar from \"./components/navBar\";\nimport { DndProvider } from \"react-dnd\";\nimport { HTML5Backend } from \"react-dnd-html5-backend\";\nimport { useCardState } from \"./customHooks/cardManage\";\nimport DeleteBin from \"./components/subComponents/deleteBin\";\nimport BinContents from \"./components/subComponents/binContents\";\nimport { connect } from \"react-redux\";\nimport { getCompleteBoard } from \"./redux/actions/boardAction\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst testdata = [{\n  id: 0,\n  title: \"Open Task\",\n  cards: [{\n    id: 0,\n    title: \"Stylize\",\n    date: \"1-20-2021\",\n    description: \"Lets make the website pretty\"\n  }, {\n    id: 1,\n    title: \"Back-end\",\n    date: \"1-20-2021\",\n    description: \"We need data persistence, and availability.\"\n  }, {\n    id: 2,\n    title: \"Clean\",\n    date: \"1-20-2021\",\n    description: \"The Code, let's make sure its not spaghetti. \"\n  }]\n}, {\n  id: 1,\n  title: \"In Progress\",\n  cards: [{\n    id: 0,\n    title: \"Delete Functionality\",\n    date: \"1-20-2021\",\n    description: \"Users should be able to remove columns and cards.\"\n  }, {\n    id: 1,\n    title: \"Improve Sample Data\",\n    date: \"1-20-2021\",\n    description: \"Sample data needs to show how a trello board works. \"\n  }, {\n    id: 2,\n    title: \"Organize Stylings\",\n    date: \"1-20-2021\",\n    description: \"Remove none js dependent stylings from js styles. \"\n  }]\n}, {\n  id: 2,\n  title: \"Completed\",\n  cards: [{\n    id: 0,\n    title: \"Click and Drag Functionality\",\n    date: \"1-20-2021\",\n    description: \"Cards and columns can be moved and edited. \"\n  }, {\n    id: 1,\n    title: \"Fix Id Function\",\n    date: \"1-20-2021\",\n    description: \"Fix bug where Id are not updating appropriately.\"\n  }, {\n    id: 2,\n    title: \"Build State Splice Methods\",\n    date: \"1-20-2021\",\n    description: \"Make state data reflect what users want to happen.\"\n  }]\n}];\n\nfunction KanBan({\n  getCompleteBoard,\n  boardId,\n  boardInit\n}) {\n  _s();\n\n  useEffect(() => {\n    getCompleteBoard(boardId);\n  }, []);\n  const [isLoaded, setIsLoaded] = useState(false);\n  const [cardState, insertNewColumn, insertNewCard, relocateCard, relocateColumn, removedCards, removedColumns, binCard, binColumn] = useCardState(boardInit);\n  const [dragId, setDragId] = useState();\n  const [bin, setBin] = useState(false);\n\n  const newCol = title => {\n    insertNewColumn(title);\n  };\n\n  const newCard = (location, data) => {\n    insertNewCard(location, data);\n  };\n\n  const moveCard = destination => {\n    relocateCard(dragId, destination);\n  };\n\n  const moveColumn = destination => {\n    relocateColumn(dragId[0], destination);\n  };\n\n  const handleRemove = id => {\n    if (id[2] === \"card\") {\n      binCard(id[0], id[1]);\n    }\n\n    if (id[2] === \"col\") {\n      binColumn(id[0]);\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(NavBar, {\n      newCol: newCol\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 143,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(DndProvider, {\n      backend: HTML5Backend,\n      children: /*#__PURE__*/_jsxDEV(Board, {\n        children: [cardState.map(col => /*#__PURE__*/_jsxDEV(Col, {\n          data: col,\n          columnId: col.id,\n          newCard: newCard,\n          moveCard: moveCard,\n          moveColumn: moveColumn,\n          setDragId: setDragId\n        }, col.id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 147,\n          columnNumber: 13\n        }, this)), /*#__PURE__*/_jsxDEV(DeleteBin, {\n          dragId: dragId,\n          handleRemove: handleRemove,\n          setBin: setBin\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 157,\n          columnNumber: 11\n        }, this), bin ? /*#__PURE__*/_jsxDEV(BinContents, {\n          removedCards: removedCards,\n          removedColumns: removedColumns,\n          setBin: setBin\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 162,\n          columnNumber: 17\n        }, this) : null]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 145,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 144,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n}\n\n_s(KanBan, \"VZ0Z1VinMZD1BgolCB4od+BOkhI=\", false, function () {\n  return [useCardState];\n});\n\n_c = KanBan;\n\nconst mapStateToProps = state => {\n  return {\n    boardId: state.dash.selectedBoard,\n    boardInit: state.board.boardData\n  };\n};\n\nexport default connect(mapStateToProps, {\n  getCompleteBoard\n})(KanBan);\n\nvar _c;\n\n$RefreshReg$(_c, \"KanBan\");","map":{"version":3,"sources":["/Users/aply/Documents/SelfStudy/FocusedKanban/src/KanBan.js"],"names":["React","useEffect","useState","Board","Col","NavBar","DndProvider","HTML5Backend","useCardState","DeleteBin","BinContents","connect","getCompleteBoard","testdata","id","title","cards","date","description","KanBan","boardId","boardInit","isLoaded","setIsLoaded","cardState","insertNewColumn","insertNewCard","relocateCard","relocateColumn","removedCards","removedColumns","binCard","binColumn","dragId","setDragId","bin","setBin","newCol","newCard","location","data","moveCard","destination","moveColumn","handleRemove","map","col","mapStateToProps","state","dash","selectedBoard","board","boardData"],"mappings":"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","sourcesContent":["import React,{ useEffect, useState } from \"react\";\nimport Board from \"./components/board\";\nimport Col from \"./components/col\";\nimport NavBar from \"./components/navBar\";\nimport { DndProvider } from \"react-dnd\";\nimport { HTML5Backend } from \"react-dnd-html5-backend\";\nimport { useCardState } from \"./customHooks/cardManage\";\nimport DeleteBin from \"./components/subComponents/deleteBin\";\nimport BinContents from \"./components/subComponents/binContents\";\nimport { connect } from \"react-redux\";\nimport { getCompleteBoard } from \"./redux/actions/boardAction\";\n\n\n\nconst testdata = [\n  {\n    id: 0,\n    title: \"Open Task\",\n    cards: [\n      {\n        id: 0,\n        title: \"Stylize\",\n        date: \"1-20-2021\",\n        description: \"Lets make the website pretty\",\n      },\n      {\n        id: 1,\n        title: \"Back-end\",\n        date: \"1-20-2021\",\n        description: \"We need data persistence, and availability.\",\n      },\n      {\n        id: 2,\n        title: \"Clean\",\n        date: \"1-20-2021\",\n        description: \"The Code, let's make sure its not spaghetti. \",\n      },\n    ],\n  },\n  {\n    id: 1,\n    title: \"In Progress\",\n    cards: [\n      {\n        id: 0,\n        title: \"Delete Functionality\",\n        date: \"1-20-2021\",\n        description: \"Users should be able to remove columns and cards.\",\n      },\n      {\n        id: 1,\n        title: \"Improve Sample Data\",\n        date: \"1-20-2021\",\n        description: \"Sample data needs to show how a trello board works. \",\n      },\n      {\n        id: 2,\n        title: \"Organize Stylings\",\n        date: \"1-20-2021\",\n        description: \"Remove none js dependent stylings from js styles. \",\n      },\n    ],\n  },\n  {\n    id: 2,\n    title: \"Completed\",\n    cards: [\n      {\n        id: 0,\n        title: \"Click and Drag Functionality\",\n        date: \"1-20-2021\",\n        description: \"Cards and columns can be moved and edited. \",\n      },\n      {\n        id: 1,\n        title: \"Fix Id Function\",\n        date: \"1-20-2021\",\n        description: \"Fix bug where Id are not updating appropriately.\",\n      },\n      {\n        id: 2,\n        title: \"Build State Splice Methods\",\n        date: \"1-20-2021\",\n        description: \"Make state data reflect what users want to happen.\",\n      },\n    ],\n  },\n];\n\nfunction KanBan({getCompleteBoard, boardId, boardInit}) {\n\n  useEffect(()=> {\n    getCompleteBoard(boardId)\n  },[])\n\n  const [isLoaded, setIsLoaded] = useState(false)\n  \n\n  const [\n    cardState,\n    insertNewColumn,\n    insertNewCard,\n    relocateCard,\n    relocateColumn,\n    removedCards,\n    removedColumns,\n    binCard,\n    binColumn\n  ] = useCardState(boardInit);\n\n  const [dragId, setDragId] = useState();\n\n  const [bin, setBin] = useState(false)\n\n  const newCol = (title) => {\n    insertNewColumn(title);\n  };\n\n  const newCard = (location, data) => {\n    insertNewCard(location, data);\n  };\n\n  \n  const moveCard = (destination) => {\n    relocateCard( dragId, destination);\n  };\n\n  const moveColumn =(destination) =>{\n    relocateColumn(dragId[0], destination)\n  }\n\n  const handleRemove = (id) => {\n    if(id[2] === \"card\"){\n      binCard(id[0], id[1])\n    }\n    if(id[2]=== \"col\"){\n      binColumn(id[0])\n    }\n  }\n\n  return (\n    <>\n      <NavBar newCol={newCol} />\n      <DndProvider backend={HTML5Backend}>\n        <Board>\n          {cardState.map((col) => (\n            <Col\n              data={col}\n              key={col.id}\n              columnId={col.id}\n              newCard={newCard}\n              moveCard={moveCard}\n              moveColumn={moveColumn}\n              setDragId={setDragId}\n            />\n          ))}\n          <DeleteBin\n            dragId={dragId}\n            handleRemove={handleRemove}\n            setBin={setBin}\n          />\n          {bin? <BinContents removedCards={removedCards} removedColumns={removedColumns} setBin={setBin}/> : null}\n        </Board>\n      </DndProvider>\n    </>\n  );\n}\n\nconst mapStateToProps = (state) => {\n  return{\n    boardId: state.dash.selectedBoard,\n    boardInit: state.board.boardData\n  }\n}\n\nexport default connect(mapStateToProps, {getCompleteBoard})(KanBan);\n"]},"metadata":{},"sourceType":"module"}