{"ast":null,"code":"var _jsxFileName = \"/Users/aply/Documents/SelfStudy/FocusedKanban/src/accountRoutes/board/innerBoardComponents/column.jsx\",\n    _s = $RefreshSig$();\n\nimport { useEffect, useState } from \"react\";\nimport { useDrag, useDrop } from \"react-dnd\";\nimport { connect } from \"react-redux\";\nimport Colors from \"../../../assets/colors\";\nimport { selectColumn } from \"../../../redux/actions/boardAction\";\nimport { boardStyles } from \"../boardStyles\";\nimport { ITEM_TYPES } from \"../dnd/constants/itemTypes\";\nimport Card from \"./card\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction Column({\n  colId,\n  title,\n  cards,\n  selectColumn\n}) {\n  _s();\n\n  const [{\n    isDragging\n  }, drag] = useDrag({\n    item: {\n      type: ITEM_TYPES.COLUMN\n    },\n    collect: monitor => ({\n      isDragging: !!monitor.isDragging()\n    })\n  });\n  const [{\n    isOver\n  }, drop] = useDrop({\n    accept: ITEM_TYPES.CARD,\n    drop: () => {\n      console.log(\"was dropped\");\n    },\n    collect: monitor => ({\n      isOver: !!monitor.isOver()\n    })\n  });\n  const [hoverState, setHoverState] = useState(false);\n  const [containerStyle, setContainerStyle] = useState(boardStyles.column.container);\n  useEffect(() => {\n    if (hoverState) {\n      setContainerStyle({ ...boardStyles.column.container,\n        boxShadow: `4px 4px 12px ${Colors.offWhite}`,\n        backgroundColor: Colors.offWhite\n      });\n    } else {\n      setContainerStyle(boardStyles.column.container);\n    }\n  }, [hoverState]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: { ...containerStyle,\n      filter: isDragging ? \"blur(3px)\" : null\n    },\n    ref: drag,\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      style: boardStyles.column.header,\n      onMouseEnter: () => {\n        selectColumn(colId);\n        setHoverState(true);\n      },\n      onMouseLeave: () => {\n        setHoverState(false);\n      },\n      children: title\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      ref: drop,\n      style: { ...boardStyles.column.cardContainer,\n        boxShadow: isOver ? `4px 4px 12px ${Colors.light_accent}` : null\n      },\n      children: cards.length > 0 ? cards.map(card => /*#__PURE__*/_jsxDEV(Card, {\n        card: card\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 49\n      }, this)) : null\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 45,\n    columnNumber: 5\n  }, this);\n}\n\n_s(Column, \"qTpZLRHxJNgXp0zNjNTRNLBiwx4=\", false, function () {\n  return [useDrag, useDrop];\n});\n\n_c = Column;\n\nconst mapStateToProps = state => {\n  return {};\n};\n\nexport default connect(mapStateToProps, {\n  selectColumn\n})(Column);\n\nvar _c;\n\n$RefreshReg$(_c, \"Column\");","map":{"version":3,"sources":["/Users/aply/Documents/SelfStudy/FocusedKanban/src/accountRoutes/board/innerBoardComponents/column.jsx"],"names":["useEffect","useState","useDrag","useDrop","connect","Colors","selectColumn","boardStyles","ITEM_TYPES","Card","Column","colId","title","cards","isDragging","drag","item","type","COLUMN","collect","monitor","isOver","drop","accept","CARD","console","log","hoverState","setHoverState","containerStyle","setContainerStyle","column","container","boxShadow","offWhite","backgroundColor","filter","header","cardContainer","light_accent","length","map","card","mapStateToProps","state"],"mappings":"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","sourcesContent":["import { useEffect, useState } from \"react\";\nimport { useDrag, useDrop } from \"react-dnd\";\nimport { connect } from \"react-redux\";\nimport Colors from \"../../../assets/colors\";\nimport { selectColumn } from \"../../../redux/actions/boardAction\";\nimport { boardStyles } from \"../boardStyles\";\nimport { ITEM_TYPES } from \"../dnd/constants/itemTypes\";\nimport Card from \"./card\";\n\n\nfunction Column({ colId,title, cards, selectColumn }) {\n  const [{ isDragging }, drag] = useDrag({\n    item: { type: ITEM_TYPES.COLUMN },\n    collect: (monitor) => ({\n      isDragging: !!monitor.isDragging(),\n    }),\n  });\n\n  const [{ isOver }, drop] = useDrop({\n    accept: ITEM_TYPES.CARD,\n    drop: () => {\n      console.log(\"was dropped\");\n    },\n    collect: (monitor) => ({\n      isOver: !!monitor.isOver(),\n    }),\n  });\n\n  const [hoverState, setHoverState] = useState(false);\n  const [containerStyle, setContainerStyle] = useState(\n    boardStyles.column.container\n  );\n  useEffect(() => {\n    if (hoverState) {\n      setContainerStyle({\n        ...boardStyles.column.container,\n        boxShadow: `4px 4px 12px ${Colors.offWhite}`,\n        backgroundColor: Colors.offWhite,\n      });\n    } else {\n      setContainerStyle(boardStyles.column.container);\n    }\n  }, [hoverState]);\n  return (\n    <div\n      style={{ ...containerStyle, filter: isDragging ? \"blur(3px)\" : null }}\n      ref={drag}\n    >\n      <h1\n        style={boardStyles.column.header}\n        onMouseEnter={() => {\n          selectColumn(colId)\n          setHoverState(true);\n        }}\n        onMouseLeave={() => {\n          setHoverState(false);\n        }}\n      >\n        {title}\n      </h1>\n      <div\n        ref={drop}\n        style={{\n          ...boardStyles.column.cardContainer,\n          boxShadow: isOver ? `4px 4px 12px ${Colors.light_accent}` : null,\n        }}\n      >\n        {cards.length > 0 ? cards.map((card) => <Card card={card} />) : null}\n      </div>\n    </div>\n  );\n}\n\nconst mapStateToProps = state => {\n    return{\n\n    }\n}\n\nexport default connect(mapStateToProps, {selectColumn})(Column);\n"]},"metadata":{},"sourceType":"module"}