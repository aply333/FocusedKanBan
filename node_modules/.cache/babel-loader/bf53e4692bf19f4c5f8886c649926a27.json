{"ast":null,"code":"var _jsxFileName = \"/Users/aply/Documents/SelfStudy/FocusedKanban/src/accountRoutes/board/Board.jsx\",\n    _s = $RefreshSig$();\n\nimport { useEffect, useState } from \"react\";\nimport { connect } from \"react-redux\";\nimport { getCompleteBoard } from \"../../redux/actions/boardAction\";\nimport { boardStyles } from \"./boardStyles\";\nimport Column from \"./innerBoardComponents/column\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction Board({\n  boardId,\n  boardData,\n  getCompleteBoard\n}) {\n  _s();\n\n  useEffect(() => {\n    getCompleteBoard(boardId);\n  }, []);\n  const [doneLoading, setDoneLoading] = useState(false);\n  useEffect(() => {\n    if (boardData.length > 0) {\n      setDoneLoading(true);\n    }\n  }, [boardData]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: boardStyles.container,\n    children: doneLoading ? boardData.map(col => /*#__PURE__*/_jsxDEV(Column, {\n      colId: col.column_id,\n      title: col.title,\n      cards: col.cards\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 23,\n      columnNumber: 13\n    }, this)) : null\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 20,\n    columnNumber: 5\n  }, this);\n}\n\n_s(Board, \"rWHV+5s7QMHJYdKkCii83lN+oLo=\");\n\n_c = Board;\n\nconst mapStateToProps = state => {\n  return {\n    boardId: state.dash.selectedBoard,\n    boardData: state.board.boardData\n  };\n};\n\nexport default connect(mapStateToProps, {\n  getCompleteBoard\n})(Board);\n\nvar _c;\n\n$RefreshReg$(_c, \"Board\");","map":{"version":3,"sources":["/Users/aply/Documents/SelfStudy/FocusedKanban/src/accountRoutes/board/Board.jsx"],"names":["useEffect","useState","connect","getCompleteBoard","boardStyles","Column","Board","boardId","boardData","doneLoading","setDoneLoading","length","container","map","col","column_id","title","cards","mapStateToProps","state","dash","selectedBoard","board"],"mappings":";;;AAAA,SAASA,SAAT,EAAoBC,QAApB,QAAoC,OAApC;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,SAASC,gBAAT,QAAiC,iCAAjC;AACA,SAASC,WAAT,QAA4B,eAA5B;AACA,OAAOC,MAAP,MAAmB,+BAAnB;;;AAEA,SAASC,KAAT,CAAe;AAAEC,EAAAA,OAAF;AAAWC,EAAAA,SAAX;AAAsBL,EAAAA;AAAtB,CAAf,EAAyD;AAAA;;AACvDH,EAAAA,SAAS,CAAC,MAAM;AACdG,IAAAA,gBAAgB,CAACI,OAAD,CAAhB;AACD,GAFQ,EAEN,EAFM,CAAT;AAIA,QAAM,CAACE,WAAD,EAAcC,cAAd,IAAgCT,QAAQ,CAAC,KAAD,CAA9C;AACAD,EAAAA,SAAS,CAAC,MAAM;AACd,QAAIQ,SAAS,CAACG,MAAV,GAAmB,CAAvB,EAA0B;AACxBD,MAAAA,cAAc,CAAC,IAAD,CAAd;AACD;AACF,GAJQ,EAIN,CAACF,SAAD,CAJM,CAAT;AAMA,sBACE;AAAK,IAAA,KAAK,EAAEJ,WAAW,CAACQ,SAAxB;AAAA,cACGH,WAAW,GACRD,SAAS,CAACK,GAAV,CAAeC,GAAD,iBACZ,QAAC,MAAD;AAAQ,MAAA,KAAK,EAAEA,GAAG,CAACC,SAAnB;AAA8B,MAAA,KAAK,EAAED,GAAG,CAACE,KAAzC;AAAgD,MAAA,KAAK,EAAEF,GAAG,CAACG;AAA3D;AAAA;AAAA;AAAA;AAAA,YADF,CADQ,GAIR;AALN;AAAA;AAAA;AAAA;AAAA,UADF;AASD;;GArBQX,K;;KAAAA,K;;AAuBT,MAAMY,eAAe,GAAIC,KAAD,IAAW;AACjC,SAAO;AACLZ,IAAAA,OAAO,EAAEY,KAAK,CAACC,IAAN,CAAWC,aADf;AAELb,IAAAA,SAAS,EAAEW,KAAK,CAACG,KAAN,CAAYd;AAFlB,GAAP;AAID,CALD;;AAOA,eAAeN,OAAO,CAACgB,eAAD,EAAkB;AAAEf,EAAAA;AAAF,CAAlB,CAAP,CAA+CG,KAA/C,CAAf","sourcesContent":["import { useEffect, useState } from \"react\";\nimport { connect } from \"react-redux\";\nimport { getCompleteBoard } from \"../../redux/actions/boardAction\";\nimport { boardStyles } from \"./boardStyles\";\nimport Column from \"./innerBoardComponents/column\";\n\nfunction Board({ boardId, boardData, getCompleteBoard }) {\n  useEffect(() => {\n    getCompleteBoard(boardId);\n  }, []);\n\n  const [doneLoading, setDoneLoading] = useState(false);\n  useEffect(() => {\n    if (boardData.length > 0) {\n      setDoneLoading(true);\n    }\n  }, [boardData]);\n\n  return (\n    <div style={boardStyles.container}>\n      {doneLoading\n        ? boardData.map((col) => (\n            <Column colId={col.column_id} title={col.title} cards={col.cards} />\n          ))\n        : null}\n    </div>\n  );\n}\n\nconst mapStateToProps = (state) => {\n  return {\n    boardId: state.dash.selectedBoard,\n    boardData: state.board.boardData,\n  };\n};\n\nexport default connect(mapStateToProps, { getCompleteBoard })(Board);\n"]},"metadata":{},"sourceType":"module"}