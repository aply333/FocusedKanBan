{"ast":null,"code":"import { actionTypes } from \"../actions/actionTypes\";\nimport { initialDash } from \"./initialStore\";\n\nconst dashStore = (state = initialDash, action) => {\n  switch (action.type) {\n    case actionTypes.GET_BOARDS_START:\n      return { ...state,\n        dashFetch: true,\n        dashError: \"\"\n      };\n\n    case actionTypes.GET_BOARDS_SUCCESS:\n      return { ...state,\n        dashFetch: false,\n        availableBoards: action.payload.boards\n      };\n\n    case actionTypes.GET_BOARDS_FAIL:\n      return { ...state,\n        dashFetch: false,\n        dashError: action.payload\n      };\n\n    case actionTypes.SET_SELECTED_BOARD:\n      return { ...state,\n        selectedBoard: action.payload\n      };\n\n    default:\n      return state;\n  }\n};\n\nexport default dashStore;","map":{"version":3,"sources":["/Users/aply/Documents/SelfStudy/FocusedKanban/src/redux/reducers/dashStore.js"],"names":["actionTypes","initialDash","dashStore","state","action","type","GET_BOARDS_START","dashFetch","dashError","GET_BOARDS_SUCCESS","availableBoards","payload","boards","GET_BOARDS_FAIL","SET_SELECTED_BOARD","selectedBoard"],"mappings":"AAAA,SAASA,WAAT,QAA4B,wBAA5B;AACA,SAASC,WAAT,QAA4B,gBAA5B;;AAEA,MAAMC,SAAS,GAAG,CAACC,KAAK,GAAGF,WAAT,EAAsBG,MAAtB,KAAiC;AACjD,UAAQA,MAAM,CAACC,IAAf;AACE,SAAKL,WAAW,CAACM,gBAAjB;AACE,aAAO,EACL,GAAGH,KADE;AAELI,QAAAA,SAAS,EAAE,IAFN;AAGLC,QAAAA,SAAS,EAAE;AAHN,OAAP;;AAKF,SAAKR,WAAW,CAACS,kBAAjB;AACE,aAAO,EACL,GAAGN,KADE;AAELI,QAAAA,SAAS,EAAE,KAFN;AAGLG,QAAAA,eAAe,EAAEN,MAAM,CAACO,OAAP,CAAeC;AAH3B,OAAP;;AAKF,SAAKZ,WAAW,CAACa,eAAjB;AACE,aAAO,EACL,GAAGV,KADE;AAELI,QAAAA,SAAS,EAAE,KAFN;AAGLC,QAAAA,SAAS,EAAEJ,MAAM,CAACO;AAHb,OAAP;;AAKF,SAAKX,WAAW,CAACc,kBAAjB;AACE,aAAO,EACL,GAAGX,KADE;AAELY,QAAAA,aAAa,EAAEX,MAAM,CAACO;AAFjB,OAAP;;AAIF;AACE,aAAOR,KAAP;AAzBJ;AA2BD,CA5BD;;AA8BA,eAAeD,SAAf","sourcesContent":["import { actionTypes } from \"../actions/actionTypes\";\nimport { initialDash } from \"./initialStore\";\n\nconst dashStore = (state = initialDash, action) => {\n  switch (action.type) {\n    case actionTypes.GET_BOARDS_START:\n      return {\n        ...state,\n        dashFetch: true,\n        dashError: \"\",\n      };\n    case actionTypes.GET_BOARDS_SUCCESS:\n      return {\n        ...state,\n        dashFetch: false,\n        availableBoards: action.payload.boards,\n      };\n    case actionTypes.GET_BOARDS_FAIL:\n      return {\n        ...state,\n        dashFetch: false,\n        dashError: action.payload,\n      };\n    case actionTypes.SET_SELECTED_BOARD:\n      return {\n        ...state,\n        selectedBoard: action.payload,\n      };\n    default:\n      return state;\n  }\n};\n\nexport default dashStore;\n"]},"metadata":{},"sourceType":"module"}